version: 2

# List of jobs
jobs:

    # Install python dependencies using virtual env
    build:
        working_directory: ~/builder
        docker:
            - image: amazonlinux:2
        steps:
            # Checkout the code from the branch into the working_directory
            - checkout

            # Log the current branch
            - run:
                name: Show current branch
                command: echo ${CIRCLE_BRANCH}

            - run:
                name: Yum Update
                command: yum -y update

            - run:
                name: Install python
                command: yum install -y python2-pip

            - run:
                name: Install virtual env
                command: pip install --no-input virtualenv

            - run:
                name: Echo ls
                command: echo $(ls)

            - run:
                name: Copy lambda to temp folder
                command: cp -R ./lambda/ ./lambda-build

            - run:
                name: Set virtualenv
                command: virtualenv --no-site-packages lambda-build

            - run:
                name: Echo ls
                command: echo $(ls)

            - run:
                name: Activate virtual env
                command: . lambda-build/bin/activate

            - run:
                name: Install piton libraries
                command: pip install -r ./lambda-build/requirements.txt -t ./lambda-build

            - run:
                name: Echo ls
                command: echo $(ls -a ./lambda-build)

            # Download and cache dependencies
            # - restore_cache:
            #     keys:
            #     - v1-dependencies-{{ checksum "requirements.txt" }}
            #     # fallback to using the latest cache if no exact match is found
            #     - v1-dependencies-

            # - save_cache:
            #     paths:
            #     - ./venv
            #     key: v1-dependencies-{{ checksum "requirements.txt" }}

            # run tests!
            # this example uses Django's built-in test-runner
            # other common Python testing frameworks include pytest and nose
            # https://pytest.org
            # https://nose.readthedocs.io
            # - run:
            #     name: run tests
            #     command: |
            #       . venv/bin/activate
            #       python manage.py test

            # - store_artifacts:
            #     path: test-reports
            #     destination: test-reports
